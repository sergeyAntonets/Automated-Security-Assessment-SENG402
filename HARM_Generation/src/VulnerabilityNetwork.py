from Vulnerability import VulnerabilityNode
from Network import Network

class VulnerabilityNetwork(Network):
    """
    Class representing a the vulnerabilities of a Node and how they are
    connected.
    """

    def __init__(self, vulnerabilities):
        super().__init__() # Initialize the base Network class
        self.all_vulnerabilities: list[VulnerabilityNode] = vulnerabilities
        self.none_to_root: list[VulnerabilityNode] = []
        self.none_to_user: list[VulnerabilityNode] = []
        self.user_to_root: list[VulnerabilityNode] = []
        self.categorizeVulnerabilities()
        

    def categorizeVulnerabilities(self):
        """
        Categorize vulnerabilities based on their precondition and
        postcondition.
        """
        for vul in self.all_vulnerabilities:
            if vul.precondition == 'None' and vul.postcondition == 'Root':
                
                self.none_to_root.append(vul)
            elif vul.precondition == 'None' and vul.postcondition == 'User':
                self.none_to_user.append(vul)
            elif vul.precondition == 'User' and vul.postcondition == 'Root':
                self.user_to_root.append(vul)
