"""
CREST Project 9: Automated security assessment for interconnected systems
Created by Mengmeng Ge
Modified by Moyang Feng
05/02/2020
This module contains vulnerability class and relevant functions.
"""

from Network import *
from SecurityMetrics import *
from HARM_Generation.scripts.llm_utils import generate_postcondition_llm
import ast
from evaluation.runningBaronLLM import baron_local_generate


class VulnerabilityNode(object):
    """
    Create vulnerability node object.
    """
    def __init__(self, name):
        # general info
        self.name = name
        self.publishedDate = ''
        self.lastModifiedDate = ''
        self.vendor_list = []
        self.product_list = []
        self.type = ''
        self.description = ''

        # CVSS metrics
        self.cvss_vector = ''

        # pre/post conditions
        self.precondition = ''
        self.postcondition = ''

        # all vulnerabilities that are reachable from this vulnerability
        self.reachable_vulnerabilities = []
    
    def __str__(self):
        return self.name
    
    def readCVSS(self, data):
        self.name = data['ID']
        self.publishedDate = data['publishedDate']
        self.lastModifiedDate = data['lastModifiedDate']
        self.vendor_list = ast.literal_eval(data['Vendor'])
        self.product_list = ast.literal_eval(data['Product'])
        self.type = data['Type']
        self.description = data['Description']

        self.cvss_vector = data['CVSS_Vector']

        # determine the privilege 
        self.precondition = self.setPreCondition()
        self.postcondition = self.setPostCondition(baron_local_generate)
        

        
    def printInfo(self):
        if self.description == '':
            print('Vulnerability Node : ', self.name)
            return
        
        print('\n===== %s =====' %self.name)
        print('Published Date: ', self.publishedDate)
        print('Last Modified Date: ', self.lastModifiedDate)
        print('Vendor:', self.vendor_list)
        print('Product: ', self.product_list)
        print('Type: ', self.type)
        print('Description: ', self.description)
        print('Precondition: ', self.precondition)
        print('Postcondition: ', self.postcondition)
        print('CVSS Vector: ', self.cvss_vector)



    # def createVuls(self, node):
    #     """
    #     Create vulnerability network for the node.
    #     :param node: node in the network which has vulnerabilities
    #     :param metricValue: assign a metric value to vulnerability (e.g. attack probability)
    #     :param pri: assign privilege value to vulnerability (1: none; 2: user; 3: admin)
    #     :returns: none
    #     """
        
    #     #Create a vulnerability network for the node
    #     if node.vul is None:
    #         node.vul = network()
            
    #     #Add current vulnerability into the vulnerability network
    #     node.vul.nodes.append(self)
        
    #     return None
    
    def thresholdPri(self, node, t):
        """
        Set start point for the vulnerability network and link vulnerabilities to the start point.
        
        :param node: node in the network which has vulnerabilities
        :param t: privilege value for the start point
        :returns None
        """
        
        node.vul.start = VulnerabilityNode('start')
        start = node.vul.start
        del start.reachable_vulnerabilities[:]

        # loop through vulnerability nodes
        for v in node.vul.nodes:
            if v.privilege <= t:
                start.reachable_vulnerabilities.append(v)
        
        return None
    
    def terminalPri(self, node, t):
        """
        Set end point for the vulnerability network and link vulnerabilities to the end point.
        
        :param node: node in the network which has vulnerabilities
        :param t: privilege value for the end point
        :returns None
        """
        
        node.vul.end = VulnerabilityNode('end')
        end = node.vul.end
        del end.reachable_vulnerabilities[:]

        # loop through vulnerability nodes
        for v in node.vul.nodes:
            if v.privilege >= t:
                v.reachable_vulnerabilities.append(end)
        
        return None
    

    def setPreCondition(self):
        """
        Maps Privilege Required from CVSS vector to precondition string.
        
        :returns precondition string
        """
        
        if 'PR:N' in self.cvss_vector:
            return 'None'
        elif 'PR:L' in self.cvss_vector:
            return 'User'
        elif 'PR:H' in self.cvss_vector:
            return 'Root'
        else:
            return 'User'
        

    def setPostCondition(self, llm_function):
        """
        Uses AI to assess cvss vector and description to determine
        postcondition privilege gained by an attacker after exploiting the
        vulnerability.

        :param llm_function: LLM function to use (e.g., baron_local_generate)
        :returns postcondition string ('None', 'User', or 'Root')
        """
        return generate_postcondition_llm(self.cvss_vector, self.description, llm_function)

